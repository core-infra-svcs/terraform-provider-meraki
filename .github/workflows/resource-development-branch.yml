# Terraform Provider testing workflow.
name: resource development branch tests

# This GitHub action runs your tests for each pull request and push.
# Optionally, you can turn it on using a schedule for regular testing.
on:
  push:
    branches-ignore:
      - main
      - development
    paths-ignore:
      - 'README.md'

# Testing only needs permissions to read the repository contents.
permissions:
  contents: read

jobs:
  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: latest

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0
          args: --timeout=30m

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

  # Ensure project builds before running testing matrix
  build:
    name: build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
      - run: go mod download
      - run: go build -v .

  generate-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
      - run: go generate ./...
      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'go generate ./...' command and commit."; exit 1)

  # Check test results and fail the workflow if the tests fail.
  tf-acc-resource-test:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Default Branch Commit
        id: fetch_default_commit
        run: |
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           "https://api.github.com/repos/${{ github.repository }}/branches/main")
          default_commit=$(echo "$response" | jq -r '.commit.sha')
          echo "::set-output name=default_commit::$default_commit"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.fetch_default_commit.outputs.default_commit }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20

      - name: Run tests
        run: |
          current_commit="${{ github.sha }}"
          base_ref="${{ steps.fetch_default_commit.outputs.default_commit }}"
          
          # Get the list of changed files
          changed_files=$(git diff --name-only "$base_ref" "$current_commit")
          echo "Changed files: $changed_files"
          
          test_function=$(grep -E '^func TestAcc.*\(t \*testing.T\)' $changed_files | awk -F 'func ' '{print $2}' | awk -F '(' '{print $1}')
          
          if [[ -n "$test_function" ]]; then
            # Run the test and store the output in a variable
            test_output=$(go test -v -cover -run "$test_function" ./internal/provider/ 2>&1)
            # Check if the test passed by searching for a specific pattern in the output
            if echo "$test_output" | grep -q "PASS"; then
              echo "TestAcc Passed"
            else
              echo "TestAcc Failed"
              exit 1
            fi
          else
            echo "TestAcc function not found"
          fi