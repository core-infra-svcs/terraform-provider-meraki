name: release please action

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v3
        with:
          release-type: terraform-module
          package-name: ${{env.ACTION_NAME}}
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Add tags to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.git.createRef({
              owner: github.repository_owner,
              repo: github.repository,
              ref: `refs/tags/commit-${{ github.sha }}`,
              sha: github.sha
            });
  release:
    runs-on: ubuntu-latest
    needs: unit-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Set up Git
        run: |
          git config --global user.name "technicaluser"
          git config --global user.email "sysuser@starbucks.com"

      - name: Create new tag
        if: github.ref == 'refs/heads/main'
        run: |
          git fetch --all --tags -f
          latest_tag=$(git tag | awk '/^v[0-9]+\.[0-9]+\.[0-9]+$/ {print $0}' | sort -rV | head -n 1)

          if [[ $latest_tag == v* ]]; then
            version=$(echo "$latest_tag" | sed -e 's/^v//')
            major=$(echo "$version" | cut -d. -f1)
            minor=$(echo "$version" | cut -d. -f2)
            patch=$(echo "$version" | cut -d. -f3)
            if [[ $minor -eq 50 || $patch -eq 100 ]]; then
              major=$((major+1))
              minor=0
              patch=0
            elif [[ $patch -eq 50 ]]; then
              minor=$((minor+1))
              patch=0
            else
              patch=$((patch+1))
            fi
            new_tag="v$major.$minor.$patch"
          else
            new_tag="v0.0.1"
          fi
          echo "New tag: $new_tag"
          echo "VERSION=$new_tag" >> $GITHUB_ENV
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commitish: master
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: Automated release generated by GitHub Actions
          draft: false
          prerelease: true

